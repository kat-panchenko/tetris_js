let overlay = document.querySelector('.overlay');
let modal = document.querySelector('.modal');
let speed = 0;

//если клацаем по модалке, то что-то должно произойти, а именно вызваться уровень сложности
modal.addEventListener('click', function (e) {
    if (e.target.classList.contains('easy')) {
        speed = 1000;
    } else if (e.target.classList.contains('normal')) {
        speed = 500;
    } else if (e.target.classList.contains('hard')) {
        speed = 200;
    }
    if (e.target.classList.contains('button')) {
        modal.style.display = 'none';
        overlay.style.display = 'none';
        startGame();
    }
});


function startGame () {
let tetris = document.createElement('div'); //создание блока тетриса
tetris.classList.add('tetris'); //присвоение этому блоку класса

for (let i = 0; i < 180; i++) { // циклом создаем все 180 ячеек поля тетриса
    let excel = document.createElement('div');
    excel.classList.add('excel');
    tetris.appendChild(excel); //в тетрис вкладываем див ЭКСЕЛ
}

let main = document.getElementsByClassName('main')[0]; // выбираем див МЕЙН и конкретно первый его элемент внутри
main.appendChild(tetris); //добавляем в него наш тетрис

let excel = document.getElementsByClassName('excel');
let i = 0;

for (let y = 18; y > 0; y--) { //проходим по каждой ячейке циклом, присваивая каждой координаты
    for (let x = 1; x < 11; x++) {
        excel[i].setAttribute('posX', x); //задаем позицию со значением Х
        excel[i].setAttribute('posY', y); //задаем позицию со значением Y
        i++;
    }
}
let x = 5, y = 15; //кординаты от которых будет начинатьсчя ход фигур (изначально взяты 5 и 15(невидимый ряд)
                    //далее создаем многомерный массив наших фигур
                     //координаты каждого квадратика фигуры считаем со второго элемента, так как координаты первого квадратика фигур мы указали в Х и Y

let mainArr = [
    //палка
    [
        [0, 1],   -индекс массива
        [0, 2],
        [0, 3],
        //поворот на 90 градусов
        [
            [-1, 1],
            [0, 0],
            [1, -1],
            [2, -2],
        ],
        //поворот на 180 градусов
        [
            [1, -1],
            [0, 0],
            [-1, 1],
            [-2, 2],
        ],
        //поворот на 270 градусов
        [
            [-1, 1],
            [0, 0],
            [1, -1],
            [2, -2],
        ],
        //поворот на 360 градусов
        [
            [1, -1],
            [0, 0],
            [-1, 1],
            [-2, 2],
        ],
    ],
    //квадрат
    [
        [1, 0],
        [0, 1],
        [1, 1],
        //поворот на 90 градусов
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        //поворот на 180 градусов
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        //поворот на 270 градусов
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        //поворот на 360 градусов
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
    ],

    //L-right
    [
        [1, 0],
        [0, 1],
        [0, 2],
        //поворот на 90 градусов
        [
            [0, 0],
            [-1, 1],
            [1, 0],
            [2, -1],
        ],
        //поворот на 180 градусов
        [
            [1, -1],
            [1, -1],
            [-1, 0],
            [-1, 0],
        ],
        //поворот на 270 градусов
        [
            [-1, 0],
            [0, -1],
            [2, -2],
            [1, -1],
        ],
        //поворот на 360 градусов
        [
            [0, -1],
            [0, -1],
            [-2, 0],
            [-2, 0],
        ],
    ],
    //L-left
    [
        [1, 0],
        [1, 1],
        [1, 2],
        //поворот на 90 градусов
        [
            [0, 0],
            [0, 0],
            [1, -1],
            [-1, -1],
        ],
        //поворот на 180 градусов
        [
            [0, -1],
            [-1, 0],
            [-2, 1],
            [1, 0],
        ],
        //поворот на 270 градусов
        [
            [2, 0],
            [0, 0],
            [1, -1],
            [1, -1],
        ],
        //поворот на 360 градусов
        [
            [-2, 0],
            [1, -1],
            [0, 0],
            [-1, 1],
        ],
    ],
    //Z-right
    [
        [1, 0],
        [-1, 1],
        [0, 1],
        //поворот на 90 градусов
        [
            [0, -1],
            [-1, 0],
            [2, -1],
            [1, 0],
        ],
        //поворот на 180 градусов
        [
            [0, 0],
            [1, -1],
            [-2, 0],
            [-1, -1],
        ],
        //поворот на 270 градусов
        [
            [0, -1],
            [-1, 0],
            [2, -1],
            [1, 0],
        ],
        //поворот на 360 градусов
        [
            [0, 0],
            [1, -1],
            [-2, 0],
            [-1, -1],
        ],
    ],
    //Z-left
    [
        [1, 0],
        [1, 1],
        [2, 1],
        //поворот на 90 градусов
        [
            [2, -1],
            [0, 0],
            [1, -1],
            [-1, 0],
        ],
        //поворот на 180 градусов
        [
            [-2, 0],
            [0, -1],
            [-1, 0],
            [1, -1],
        ],
        //поворот на 270 градусов
        [
            [2, -1],
            [0, 0],
            [1, -1],
            [-1, 0],
        ],
        //поворот на 360 градусов
        [
            [-2, 0],
            [0, -1],
            [-1, 0],
            [1, -1],
        ],
    ],
    //перевернутая Т
    [
        [1, 0],
        [2, 0],
        [1, 1],
        //поворот на 90 градусов
        [
            [1, -1],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        //поворот на 180 градусов
        [
            [0, 0],
            [-1, 0],
            [-1, 0],
            [1, -1],
        ],
        //поворот на 270 градусов
        [
            [1, -1],
            [1, -1],
            [1, -1],
            [0, 0],
        ],
        //поворот на 360 градусов
        [
            [-2, 0],
            [0, -1],
            [0, -1],
            [-1, -1],
        ],
    ],
];

let currentFigure = 0;
let figureBody = 0;
let rotate = 1;

//функия, которая выводит фигуры
function create() {
    //функция что выдает нам рандомное значение- тоесть фигурку
    function getRandom() {
        return Math.round(Math.random() * (mainArr.length - 1));  //возвращает круглое рандомное числа из длинны массива-любую фигуру
    }
     rotate = 1;

    currentFigure = getRandom(); // текущая фигура в которую будет записано рандомное значение из функции
    figureBody = [
        document.querySelector(`[posX = "${x}"][posY = "${y}"]`), //ОТРИСОВКА ФИГУР: первый квадратик фигуры
        // первая ячейка фигуры будет иметь ккоординаты: позиция Х = 5, а позиция Y = 15
        document.querySelector(`[posX = "${x + mainArr[currentFigure][0][0]}"][posY = "${y + mainArr[currentFigure][0][1]}"]`),
        //следующая ячейка- х + значение записанное в текущую фигуру(первый параметр массива), у которого мы обратимся
        //к первому параметру любой фигуры со значением 0, далее в нем мы обратимся к первому параметру координат(х)
        //тоже самое для y- добераемся до нужного значения координаты
        document.querySelector(`[posX = "${x + mainArr[currentFigure][1][0]}"][posY = "${y + mainArr[currentFigure][1][1]}"]`),
        document.querySelector(`[posX = "${x + mainArr[currentFigure][2][0]}"][posY = "${y + mainArr[currentFigure][2][1]}"]`)
    ];

    //циклом перебираем все элементы(квадратики) фигурки, чтобы каждому присвоить класс "figure"
    for (let i = 0; i < figureBody.length; i++) {
        figureBody[i].classList.add('figure');
    }
}

create();

//Правила начисления очков
let score = 0;
let input = document.getElementsByTagName('input')[0];
input.value = `YOUR SCORE: ${score}`;

//функция падения фигур
function move() {
    let moveFlag = true;
    //если наш moveFlag = true, то мы позволим нашей фигурке двигаться еще на один ряд вниз, если false- мы зафиксируем ее положение и создадим новую фигурку
    let coordinates = [
        [figureBody[0].getAttribute('posX'), figureBody[0].getAttribute('posY')], //обращаемся к координатам каждого квадратика фигуры
        [figureBody[1].getAttribute('posX'), figureBody[1].getAttribute('posY')],
        [figureBody[2].getAttribute('posX'), figureBody[2].getAttribute('posY')],
        [figureBody[3].getAttribute('posX'), figureBody[3].getAttribute('posY')]
    ];
    //проверяем по координатам, может ли фигура двигаться дальше. нет если 1. она достигла дна 2.если достигла нагромождения фигур
    //ВАЖНО: у всех фигур класс "figure", как только фигура упала, мы отнимаем этот класс и присваиваем другой класс "set"

    for (let i = 0; i < coordinates.length; i++) {

        //обращаемся к ячейке, которая лежит "этажем ниже" и спрашиваем есть ли у нее класс "set", если да- останавливаем движение фигуры
        //обращаемся ко второму элементу- вертикальная ось y (траэктория падения фигур), если y=1 - это значит,
        // что фигура достигла самого нижнего первого ряда и фигура больше не может двигаться вниз, мы ее фиксируем
        // так же условием ИЛИ мы проверяем нет ли ниже уже упавшей фигуры
        if (coordinates[i][1] === 1 || document.querySelector(`[posX = "${coordinates[i][0]}"][posY = "${coordinates[i][1] - 1}"]`).classList.contains('set')) {
            moveFlag = false;
            break;
        }
    }

    if (moveFlag === true) {
        for (let i = 0; i < figureBody.length; i++) { //циклом ищем класс "figure", чтобы удалить его и заменить
            figureBody[i].classList.remove('figure');
        }
        //перезапишем теперь уже новые координаты фигуры, таким образом фигурка движется вниз по одному ряду
        figureBody = [
            document.querySelector(`[posX = "${coordinates[0][0]}"][posY = "${coordinates[0][1] - 1}"]`),
            document.querySelector(`[posX = "${coordinates[1][0]}"][posY = "${coordinates[1][1] - 1}"]`),
            document.querySelector(`[posX = "${coordinates[2][0]}"][posY = "${coordinates[2][1] - 1}"]`),
            document.querySelector(`[posX = "${coordinates[3][0]}"][posY = "${coordinates[3][1] - 1}"]`),
        ];
        for (let i = 0; i < figureBody.length; i++) {
            figureBody[i].classList.add('figure');
        }
    } else {
        for (let i = 0; i < figureBody.length; i++) {
            figureBody[i].classList.remove('figure');
            figureBody[i].classList.add('set');
        }
 for (let i = 1; i < 15; i++) {  //цикл для проверки полного ряда и его удаления по рядам
                 let count = 0;
                 //цикл для проверки полного ряда по координатам
                 for (let k = 1; k < 11; k++) {
                     if (document.querySelector(`[posX = "${k}"][posY = "${i}"]`).classList.contains('set')) {
                         count++;
                         //повышаем коун до 10 и если равно 10- значит ряд заполнен и его нужно убрать и забрать класс Сет
                         if (count === 10) {
                             score += 10; // если ряд полный, то наши очки повышаются на 10 очков
                             input.value = `YOUR SCORE: ${score}`;
                             // проходим по всем элементам выбранного ряда - переменная м
                             for (let m = 1; m < 11; m++) {
                                 document.querySelector(`[posX = "${m}"][posY = "${i}"]`).classList.remove('set');
                             }
                             let set = document.querySelectorAll('.set');  // собираем все элементы с классом Сет
                             let newSet = []; // сюда мы будем записывать координаты ячеек нового поля ( когда они упадут на освободившееся место)
                             for (let s = 0; s < set.length; s++) {
                                 let setCoordinates = [set[s].getAttribute(posX), set[s].getAttribute(posY)];
                                 //так как нам не нужно смещать ряды ПОД удаленным рядом, то делаем проверку
                                 if (setCoordinates[1] > i) {
                                     set[s].classList.remove('set'); //далее обращаемся к ячейке,что стоит под ним и добавлям ей методом ПУШ класс Сет
                                     newSet.push(document.querySelector(`[posX = "${setCoordinates[0]}"][posY = "${setCoordinates[1] - 1}"]`));
                                 }
                             }
                             //Теперь пройдемся циклом по новому массиву newSet
                             for (let a = 0; a < newSet.length; a++) {
                                 newSet[a].classList.add('set');
                             }
                             i--;
                         }
                     }
                 }
             }
          //правила окончания игры: как только фигура застрянет на 15 ряду( невидимый нашему глазу), игра закончилась
                 for (let n = 1; n < 11; n++) {
                     if (document.querySelector(`[posX = "${n}"][posY = "15"]`).classList.contains('set')) {
                         clearInterval(interval);
                         alert(`GAME OVER! YOUR SCORE: ${score}`);
                         break;
                     }
                 }
         create();
     }
 }

//создаем интервал, который будет повторять нашу функцию  move() каждые 300мс
let interval = setInterval(() => {
    move();
}, speed);


let flag = true;

//управление кнопками,  Узнаем что в figureBody за координаты чтобы знать можно двигать или нельзя
window.addEventListener('keydown', function (e) {
    let coordinates1 = [figureBody[0].getAttribute('posX'), figureBody[0].getAttribute('posY')];
    let coordinates2 = [figureBody[1].getAttribute('posX'), figureBody[1].getAttribute('posY')];
    let coordinates3 = [figureBody[2].getAttribute('posX'), figureBody[2].getAttribute('posY')];
    let coordinates4 = [figureBody[3].getAttribute('posX'), figureBody[3].getAttribute('posY')];

    //получаем новые координаты,новое положение фигуры;
     а - параметр который будет равен от 1 до -1 в зависимости от нажатой клавиши

    function getNewState(a) {

        flag = true;

Новый масив содержащий координаты фигуры по нажатию на клавишу ( процесс передвижения)

        let figureNew = [
            document.querySelector(`[posX = "${+coordinates1[0] + a}"][posY = "${coordinates1[1]}"]`),
            document.querySelector(`[posX = "${+coordinates2[0] + a}"][posY = "${coordinates2[1]}"]`),
            document.querySelector(`[posX = "${+coordinates3[0] + a}"][posY = "${coordinates3[1]}"]`),
            document.querySelector(`[posX = "${+coordinates4[0] + a}"][posY = "${coordinates4[1]}"]`),
        ];

Проверка на возможность переместить фигур

        for (let i = 0; i < figureNew.length; i++) {
            if (!figureNew[i] || figureNew[i].classList.contains('set')) {  Если содержит клас Сэт- останавливаем движение
                flag = false;
            }
        }
        if (flag === true) {
            for (i = 0; i < figureBody.length; i++) {
                figureBody[i].classList.remove('figure');
            }
            figureBody = figureNew;

            for (i = 0; i < figureBody.length; i++) {
                figureBody[i].classList.add('figure');
            }
        }
    }

Проверяем соответствие клавишь и вызываем функцию движения по координатам
    if(e.keyCode === 37) {
        getNewState(-1);
    } else if(e.keyCode === 39) {
        getNewState(1);
    } else if(e.keyCode === 40) {
        move();
    }
});

 let figureNew = [
            document.querySelector(`[posX = "${+coordinates1[0] + mainArr[currentFigure][rotate + 2][0][0]}"][posY = "${+coordinates1[1] + mainArr[currentFigure][rotate + 2][0][1]}"]`),
            document.querySelector(`[posX = "${+coordinates2[0] + mainArr[currentFigure][rotate + 2][1][0]}"][posY = "${+coordinates2[1] + mainArr[currentFigure][rotate + 2][1][1]}"]`),
            document.querySelector(`[posX = "${+coordinates3[0] + mainArr[currentFigure][rotate + 2][2][0]}"][posY = "${+coordinates3[1] + mainArr[currentFigure][rotate + 2][2][1]}"]`),
            document.querySelector(`[posX = "${+coordinates4[0] + mainArr[currentFigure][rotate + 2][3][0]}"][posY = "${+coordinates4[1] + mainArr[currentFigure][rotate + 2][3][1]}"]`),
        ];

        for (let i = 0; i < figureNew.length; i++) {
            if (!figureNew[i] || figureNew[i].classList.contains('set')) {
                flag = false;
            }
        }
        if (flag === true) {
            for (i = 0; i < figureBody.length; i++) {
                figureBody[i].classList.remove('figure');
            }
            figureBody = figureNew;

            for (i = 0; i < figureBody.length; i++) {
                figureBody[i].classList.add('figure');
            }
            //если ротейт меньше 4 то мы его продолжаем вращать, если же равен 4 , то мы сбрасываем его значение до единицы и можем вращать заново перебирая координаты поновому на новом ряду
            if (rotate < 4) {
                rotate++;
            } else {
                rotate = 1;
            }
        }
    }

});
}